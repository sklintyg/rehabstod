plugins {
    id "se.inera.intyg.plugin.common" version "3.2.10-SNAPSHOT" apply false
    id "io.spring.dependency-management" version "1.1.3" apply false
    id "com.netflix.nebula.node" version "3.0.0" apply false
    id "org.gretty" version "3.1.1" apply false
    id 'test-report-aggregation'
}

ext {
    intygInfraVersion = System.properties['infraVersion'] ?: '3.20.0-SNAPSHOT'
    refDataVersion = System.properties['refDataVersion'] ?: '1.0-SNAPSHOT'

    blockingSchemaVersion = "4.0.1.1"
    consentSchemaVersion = "2.0.1.1"
    internalMonitoringSchemaVersion = "1.0.4.1"
    intygClinicalprocessSchemasVersion = "1.0.24.1"
    intygHealthcondRehabilitationSchemasVersion = "1.1.3.1"
    rivtaItintegrationMonitoringSchemasVersion = "1.0.0.5.1"
    rivtaGetPersonsPersonSchemasVersion = "3.1.1.1"
    schemasContractVersion = "2.1.8.1"
    srsSchemasVersion = "0.0.16.1"

    commonsIoVersion = "2.14.0"
    cxfVersion = "3.6.2"
    googleGuavaVersion = "32.1.3-jre"
    itext7Version = "7.2.5"
    javaxJwsApiVersion = "1.1"
    jaxb2Version = "0.13.1"
    picocliVersion = "4.7.5"
    poiVersion = "5.2.4"
    springSecurityExtensionsVersion = "1.0.3.RELEASE"
    shedlockSpringVersion = "4.46.0"
    testngVersion = "7.8.0"

    nodeJsVersion = "12.22.12"
    npmVersion = "6.14.16"

    springbootMavenBomVersion = "2.7.17"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    group = 'se.inera.intyg.rehabstod'
    version = System.properties['buildVersion'] ?: '0.0-SNAPSHOT'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports { mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}" }
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic"
        implementation "javax.jws:javax.jws-api:${javaxJwsApiVersion}"
        implementation "org.slf4j:slf4j-api"

        testImplementation "se.inera.intyg.refdata:refdata:${refDataVersion}"
        testImplementation 'junit:junit'
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.mockito:mockito-inline"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    tasks.register('install') {
        description("Publishes artifact to local maven repository.")
        dependsOn(publishMavenWebPublicationToMavenLocal)
    }

    tasks.register('createVersionPropertyFile', VersionPropertyFileTask)

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        mavenCentral {
            content {
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    checkstyleMain.dependsOn createVersionPropertyFile
    compileTestJava.dependsOn createVersionPropertyFile
    test { useJUnitPlatform() }

    configurations {
        // Remove these due to conflict with Spring SAML which uses bcprov-jdk15.
        compile.exclude group: "org.bouncycastle", module: "bcpkix-jdk15on"
        compile.exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
    }

    if (!project.name.contains("-web") && !project.name.contains("-liquibase-runner")) {
        publishing {
            publications {
                mavenWeb(org.gradle.api.publish.maven.MavenPublication) {
                    from components.java
                }
            }
        }
    }

    if (project.hasProperty('codeQuality')) {
        dependencies { spotbugsSlf4j "org.slf4j:slf4j-simple" }
    }

    clean {
        setDelete(fileTree(project.layout.buildDirectory.get().asFile) {
            exclude("/tmp/.cache/expanded/expanded.lock")
        })
    }
}

tasks.register('tagRelease', TagReleaseTask)

subprojects.collect {subproject -> subproject.name }.each { subprojectName ->
    dependencies { testReportAggregation project(":${subprojectName}") }
}

//def environment = project.findProperty('env') ?: "local"
//se.inera.intyg.IntygPluginKt.addProjectPropertiesFromFile(project, file("$rootDir/env-properties/${environment}/settings.properties"))
